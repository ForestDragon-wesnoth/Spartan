#define SPARTAN_BOSSMUSICEND
    {SPARTAN_SMOOTH_REPLACE_MUSIC kreepor.ogg 1000 0}
#ifndef SPARTAN_MUSIC_FOUND
    {SPARTAN_SMOOTH_REPLACE_MUSIC underground.ogg 1000 0}
#endif
#enddef

#define HOPLITE_GET_RESIST_MULT UNIT_ID TYPE
[lua]
	code=<<

    local args = ...

    local unit = wesnoth.get_unit(args.id)

    local resist_multiplier = 1 - unit:resistance_against(args.damage_type) / 100. or 1

    wesnoth.set_variable("tmp_resistmult", resist_multiplier)

	>>
    [args]
    	id={UNIT_ID}
    	damage_type={TYPE}
    [/args]
[/lua]
#enddef

#define SPARTAN_SMOOTH_REPLACE_MUSIC NEW_TRACK FADE_OUT_TIME FADE_IN_TIME

{VARIABLE tmp_smooth_volume 100}
{VARIABLE tmp_smooth_delay_time "$({FADE_OUT_TIME} / 10)"}

{REPEAT 10 (
{VARIABLE_OP tmp_smooth_volume sub 10}
[volume]
    music=$tmp_smooth_volume
[/volume]
[delay]
    time=$tmp_smooth_delay_time
[/delay]
)}

[volume]
    music=0
[/volume]

{REPLACE_SCENARIO_MUSIC {NEW_TRACK}}

{VARIABLE tmp_smooth_delay_time "$({FADE_IN_TIME} / 10)"}

{REPEAT 10 (
{VARIABLE_OP tmp_smooth_volume add 10}
[volume]
    music=$tmp_smooth_volume
[/volume]
[delay]
    time=$tmp_smooth_delay_time
[/delay]
)}

[volume]
    music=100
[/volume]

{CLEAR_VARIABLE tmp_smooth_volume}
{CLEAR_VARIABLE tmp_smooth_delay_time}
#enddef

#define HOPLITE_ADD_ENERGY_BY_VAR VAR ENERGY_AMOUNT
[if]
    [have_unit]
        id=Hoplite2
    [/have_unit]
    [then]
        [if]
            {VARIABLE_CONDITIONAL {VAR}.id equals Hoplite}
            [then]
                {VARIABLE_OP hoplite_energy1 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy1 greater_than $hoplite_maxenergy1 (
                    [then]
                        {VARIABLE hoplite_energy1 $hoplite_maxenergy1}
                    [/then]
                )}
                {SET_LABEL 9 1 "Side 1 Energy: $hoplite_energy1|/$hoplite_maxenergy1|"}
            [/then]
            [elseif]
            {VARIABLE_CONDITIONAL {VAR}.side equals $hoplite_allyside}
            [then]
                {VARIABLE_OP hoplite_energy1 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy1 greater_than $hoplite_maxenergy1 (
                    [then]
                        {VARIABLE hoplite_energy1 $hoplite_maxenergy1}
                    [/then]
                )}
                {SET_LABEL 9 1 "Side 1 Energy: $hoplite_energy1|/$hoplite_maxenergy1|"}
                {VARIABLE_OP hoplite_energy2 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy2 greater_than $hoplite_maxenergy2 (
                    [then]
                        {VARIABLE hoplite_energy2 $hoplite_maxenergy2}
                    [/then]
                )}
                {SET_LABEL 10 1 "Side 2 Energy: $hoplite_energy2|/$hoplite_maxenergy2|"}
            [/then]
            [/elseif]
            [else]
                {VARIABLE_OP hoplite_energy2 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy2 greater_than $hoplite_maxenergy2 (
                    [then]
                        {VARIABLE hoplite_energy2 $hoplite_maxenergy2}
                    [/then]
                )}
                {SET_LABEL 10 1 "Side 2 Energy: $hoplite_energy2|/$hoplite_maxenergy2|"}
            [/else]
        [/if]
    [/then]
    [else]
        {VARIABLE_OP hoplite_energy add {ENERGY_AMOUNT}}
        {IF_VAR hoplite_energy greater_than $hoplite_maxenergy (
            [then]
                {VARIABLE hoplite_energy $hoplite_maxenergy}
            [/then]
        )}
        {SET_LABEL 10 1 "Energy: $hoplite_energy|/$hoplite_maxenergy|"}
    [/else]
[/if]
#enddef

#define HOPLITE_ADD_ENERGY_BY_SIDE SIDE ENERGY_AMOUNT
[if]
    [have_unit]
        id=Hoplite2
    [/have_unit]
    [then]
        [if]
        	[have_unit]
        		id=Hoplite
        		side={SIDE}
        	[/have_unit]
            [then]
                {VARIABLE_OP hoplite_energy1 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy1 greater_than $hoplite_maxenergy1 (
                    [then]
                        {VARIABLE hoplite_energy1 $hoplite_maxenergy1}
                    [/then]
                )}
                {SET_LABEL 9 1 "Side 1 Energy: $hoplite_energy1|/$hoplite_maxenergy1|"}
            [/then]
            [elseif]
        	[have_unit]
        		id=Hoplite2
        		side={SIDE}
        	[/have_unit]
            	[then]
                {VARIABLE_OP hoplite_energy2 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy2 greater_than $hoplite_maxenergy2 (
                    [then]
                        {VARIABLE hoplite_energy2 $hoplite_maxenergy2}
                    [/then]
                )}
                {SET_LABEL 10 1 "Side 2 Energy: $hoplite_energy2|/$hoplite_maxenergy2|"}
                [/then]
            [/elseif]
        [/if]
    [/then]
    [else]
        {VARIABLE_OP hoplite_energy add {ENERGY_AMOUNT}}
        {IF_VAR hoplite_energy greater_than $hoplite_maxenergy (
            [then]
                {VARIABLE hoplite_energy $hoplite_maxenergy}
            [/then]
        )}
        {SET_LABEL 10 1 "Energy: $hoplite_energy|/$hoplite_maxenergy|"}
    [/else]
[/if]
#enddef

#define HOPLITE_APPLY_PROMETHEUS_HEART
	{IF_VAR hoplite_maxenergy greater_than 0 (
	[then]
        {VARIABLE_OP hoplite_maxenergy add 50}
        {HOPLITE_ADD_ENERGY_BY_SIDE 1 50}
	[/then])}
	{IF_VAR hoplite_maxenergy1 greater_than 0 (
	[then]
        {VARIABLE_OP hoplite_maxenergy1 add 50}
        {VARIABLE_OP hoplite_maxenergy2 add 50}
        {HOPLITE_ADD_ENERGY_BY_SIDE 1 50}
        {HOPLITE_ADD_ENERGY_BY_SIDE 2 50}
	[/then])}
        [object]
          name="Prometheus' Heart"
          image="items/prometheus-fire1.png"
          duration=forever
          description=_"A gem containing untold power, but of which you can only harness a small portion. +50 maximum energy for the rest of the playthrough."
          [filter]
             id=Hoplite
          [/filter]
        [/object]
#enddef

#define HOPLITE_SWAP FILTER_A FILTER_B
                [animate_unit]
                  flag=standing
                  [filter]
                  	{FILTER_A}
                  [/filter]
                  [facing]
                    [filter]
                  	{FILTER_B}
                    [/filter]
                  [/facing]
                [/animate_unit]
                [store_unit]
                    [filter]
                    	{FILTER_A}
                    [/filter]
                    variable=swap_a
                    kill=no
                [/store_unit]
                [store_unit]
                    [filter]
                        {FILTER_B}
                    [/filter]
                    variable=swap_b
                    kill=no
                [/store_unit]
                [object]
                    silent=yes
                    duration=turn end
                    [filter]
                    	{FILTER_A}
                    [/filter]
                    [effect]
                        apply_to=new_animation
                        [extra_anim]
                            flag=tmp_swap$swap_b.id#adding id to the anim flag, to avoid conflicts between units, just in case
                            swap2_start_time=0
                            [swap2_frame]
                               duration=500
                                   image=$swap_b.image
                               image_mod="~TC($swap_b.side|,magenta)~FL(horiz)"
                               offset=1.0~0.0
                        #      layer=1
                                   auto_vflip=false
                            [/swap2_frame]
                            [frame]
                               duration=500
                               offset=0.0~1.0
                               sound={SOUND_LIST:MISS}
                            [/frame]
                        [/extra_anim]
                    [/effect]
                [/object]

        [hide_unit]
            {FILTER_B}
        [/hide_unit]

        [animate_unit]
          flag=tmp_swap$swap_b.id
          [filter]
            {FILTER_A}
          [/filter]
        [/animate_unit]
                [lock_view]
                [/lock_view]
        {VARIABLE swap_a2_x $swap_a.x}
        {VARIABLE swap_a2_y $swap_a.y}
        {VARIABLE swap_a.x $swap_b.x}
        {VARIABLE swap_a.y $swap_b.y}
        {VARIABLE swap_b.x $swap_a2_x}
        {VARIABLE swap_b.y $swap_a2_y}

                [unlock_view]
                [/unlock_view]
        [unstore_unit]
            variable=swap_a
            find_vacant=no
        [/unstore_unit]
        [unstore_unit]
            variable=swap_b
            find_vacant=no
        [/unstore_unit]
        [unhide_unit]
            id=$swap_b.id
        [/unhide_unit]
        [sound]
            name={SOUND_LIST:MISS}
        [/sound]
        {CLEAR_VARIABLE swap_a}
        {CLEAR_VARIABLE swap_b}
        {CLEAR_VARIABLE swap_a2_x}
        {CLEAR_VARIABLE swap_a2_y}
#enddef