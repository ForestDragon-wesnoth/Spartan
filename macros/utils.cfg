#textdomain wesnoth-Hoplite


#define CHATMSG MSG
{IF_VAR hoplite_logging equals yes (
[then]
[chat]
	message={MSG}
[/chat]
{LOG {MSG}}
[/then])}
#enddef

#define SPARTAN_BOSSMUSICEND
    {SPARTAN_SMOOTH_REPLACE_MUSIC kreepor.ogg 1000 0}
#ifndef SPARTAN_MUSIC_FOUND
    {SPARTAN_SMOOTH_REPLACE_MUSIC underground.ogg 1000 0}
#endif
#enddef

#define HOPLITE_GET_RESIST_MULT UNIT_ID TYPE
[lua]
	code=<<

    local args = ...

    local unit = wesnoth.get_unit(args.id)

    local resist_multiplier = 1 - unit:resistance_against(args.damage_type) / 100. or 1

    wesnoth.set_variable("tmp_resistmult", resist_multiplier)

	>>
    [args]
    	id={UNIT_ID}
    	damage_type={TYPE}
    [/args]
[/lua]
#enddef

#define SPARTAN_SMOOTH_REPLACE_MUSIC NEW_TRACK FADE_OUT_TIME FADE_IN_TIME

{VARIABLE tmp_smooth_volume 100}
{VARIABLE tmp_smooth_delay_time "$({FADE_OUT_TIME} / 10)"}

{REPEAT 10 (
{VARIABLE_OP tmp_smooth_volume sub 10}
[volume]
    music=$tmp_smooth_volume
[/volume]
[delay]
    time=$tmp_smooth_delay_time
[/delay]
)}

[volume]
    music=0
[/volume]

{REPLACE_SCENARIO_MUSIC {NEW_TRACK}}

{VARIABLE tmp_smooth_delay_time "$({FADE_IN_TIME} / 10)"}

{REPEAT 10 (
{VARIABLE_OP tmp_smooth_volume add 10}
[volume]
    music=$tmp_smooth_volume
[/volume]
[delay]
    time=$tmp_smooth_delay_time
[/delay]
)}

[volume]
    music=100
[/volume]

{CLEAR_VARIABLE tmp_smooth_volume}
{CLEAR_VARIABLE tmp_smooth_delay_time}
#enddef

#define HOPLITE_ADD_ENERGY_BY_VAR VAR ENERGY_AMOUNT
[if]
    [have_unit]
        id=Hoplite2
    [/have_unit]
    [then]
        [if]
            {VARIABLE_CONDITIONAL {VAR}.id equals Hoplite}
            [then]
                {VARIABLE_OP hoplite_energy1 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy1 greater_than $hoplite_maxenergy1 (
                    [then]
                        {VARIABLE hoplite_energy1 $hoplite_maxenergy1}
                    [/then]
                )}
                {SET_LABEL 9 1 "Side 1 Energy: $hoplite_energy1|/$hoplite_maxenergy1|"}
            [/then]
            [elseif]
            {VARIABLE_CONDITIONAL {VAR}.side equals $hoplite_allyside}
            [then]
                {VARIABLE_OP hoplite_energy1 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy1 greater_than $hoplite_maxenergy1 (
                    [then]
                        {VARIABLE hoplite_energy1 $hoplite_maxenergy1}
                    [/then]
                )}
                {SET_LABEL 9 1 "Side 1 Energy: $hoplite_energy1|/$hoplite_maxenergy1|"}
                {VARIABLE_OP hoplite_energy2 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy2 greater_than $hoplite_maxenergy2 (
                    [then]
                        {VARIABLE hoplite_energy2 $hoplite_maxenergy2}
                    [/then]
                )}
                {SET_LABEL 10 1 "Side 2 Energy: $hoplite_energy2|/$hoplite_maxenergy2|"}
            [/then]
            [/elseif]
            [else]
                {VARIABLE_OP hoplite_energy2 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy2 greater_than $hoplite_maxenergy2 (
                    [then]
                        {VARIABLE hoplite_energy2 $hoplite_maxenergy2}
                    [/then]
                )}
                {SET_LABEL 10 1 "Side 2 Energy: $hoplite_energy2|/$hoplite_maxenergy2|"}
            [/else]
        [/if]
    [/then]
    [else]
        {VARIABLE_OP hoplite_energy add {ENERGY_AMOUNT}}
        {IF_VAR hoplite_energy greater_than $hoplite_maxenergy (
            [then]
                {VARIABLE hoplite_energy $hoplite_maxenergy}
            [/then]
        )}
        {SET_LABEL 10 1 "Energy: $hoplite_energy|/$hoplite_maxenergy|"}
    [/else]
[/if]
#enddef

#define HOPLITE_ADD_ENERGY_BY_SIDE SIDE ENERGY_AMOUNT
[if]
    [have_unit]
        id=Hoplite2
    [/have_unit]
    [then]
        [if]
        	[have_unit]
        		id=Hoplite
        		side={SIDE}
        	[/have_unit]
            [then]
                {VARIABLE_OP hoplite_energy1 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy1 greater_than $hoplite_maxenergy1 (
                    [then]
                        {VARIABLE hoplite_energy1 $hoplite_maxenergy1}
                    [/then]
                )}
                {SET_LABEL 9 1 "Side 1 Energy: $hoplite_energy1|/$hoplite_maxenergy1|"}
            [/then]
            [elseif]
        	[have_unit]
        		id=Hoplite2
        		side={SIDE}
        	[/have_unit]
            	[then]
                {VARIABLE_OP hoplite_energy2 add {ENERGY_AMOUNT}}
                {IF_VAR hoplite_energy2 greater_than $hoplite_maxenergy2 (
                    [then]
                        {VARIABLE hoplite_energy2 $hoplite_maxenergy2}
                    [/then]
                )}
                {SET_LABEL 10 1 "Side 2 Energy: $hoplite_energy2|/$hoplite_maxenergy2|"}
                [/then]
            [/elseif]
        [/if]
    [/then]
    [else]
        {VARIABLE_OP hoplite_energy add {ENERGY_AMOUNT}}
        {IF_VAR hoplite_energy greater_than $hoplite_maxenergy (
            [then]
                {VARIABLE hoplite_energy $hoplite_maxenergy}
            [/then]
        )}
        {SET_LABEL 10 1 "Energy: $hoplite_energy|/$hoplite_maxenergy|"}
    [/else]
[/if]
#enddef

#define HOPLITE_APPLY_PROMETHEUS_HEART
	{IF_VAR hoplite_maxenergy greater_than 0 (
	[then]
        {VARIABLE_OP hoplite_maxenergy add 50}
        {HOPLITE_ADD_ENERGY_BY_SIDE 1 50}
	[/then])}
	{IF_VAR hoplite_maxenergy1 greater_than 0 (
	[then]
        {VARIABLE_OP hoplite_maxenergy1 add 50}
        {VARIABLE_OP hoplite_maxenergy2 add 50}
        {HOPLITE_ADD_ENERGY_BY_SIDE 1 50}
        {HOPLITE_ADD_ENERGY_BY_SIDE 2 50}
	[/then])}
        [object]
          name="Prometheus' Heart"
          image="items/prometheus-fire1.png"
          duration=forever
          description=_"A gem containing untold power, but of which you can only harness a small portion. +50 maximum energy for the rest of the playthrough."
          [filter]
             id=Hoplite
          [/filter]
        [/object]
#enddef

#define HOPLITE_SWAP FILTER_A FILTER_B
                [animate_unit]
                  flag=standing
                  [filter]
                  	{FILTER_A}
                  [/filter]
                  [facing]
                    [filter]
                  	{FILTER_B}
                    [/filter]
                  [/facing]
                [/animate_unit]
                [store_unit]
                    [filter]
                    	{FILTER_A}
                    [/filter]
                    variable=swap_a
                    kill=no
                [/store_unit]
                [store_unit]
                    [filter]
                        {FILTER_B}
                    [/filter]
                    variable=swap_b
                    kill=no
                [/store_unit]
                [object]
                    silent=yes
                    duration=turn end
                    [filter]
                    	{FILTER_A}
                    [/filter]
                    [effect]
                        apply_to=new_animation
                        [extra_anim]
                            flag=tmp_swap$swap_b.id#adding id to the anim flag, to avoid conflicts between units, just in case
                            swap2_start_time=0
                            [swap2_frame]
                               duration=500
                                   image=$swap_b.image
                               image_mod="~TC($swap_b.side|,magenta)~FL(horiz)"
                               offset=1.0~0.0
                        #      layer=1
                                   auto_vflip=false
                            [/swap2_frame]
                            [frame]
                               duration=500
                               offset=0.0~1.0
                               sound={SOUND_LIST:MISS}
                            [/frame]
                        [/extra_anim]
                    [/effect]
                [/object]

        [hide_unit]
            {FILTER_B}
        [/hide_unit]

        [animate_unit]
          flag=tmp_swap$swap_b.id
          [filter]
            {FILTER_A}
          [/filter]
        [/animate_unit]
                [lock_view]
                [/lock_view]
        {VARIABLE swap_a2_x $swap_a.x}
        {VARIABLE swap_a2_y $swap_a.y}
        {VARIABLE swap_a.x $swap_b.x}
        {VARIABLE swap_a.y $swap_b.y}
        {VARIABLE swap_b.x $swap_a2_x}
        {VARIABLE swap_b.y $swap_a2_y}

                [unlock_view]
                [/unlock_view]
        [unstore_unit]
            variable=swap_a
            find_vacant=no
        [/unstore_unit]
        [unstore_unit]
            variable=swap_b
            find_vacant=no
        [/unstore_unit]
        [unhide_unit]
            id=$swap_b.id
        [/unhide_unit]
        [sound]
            name={SOUND_LIST:MISS}
        [/sound]
        {CLEAR_VARIABLE swap_a}
        {CLEAR_VARIABLE swap_b}
        {CLEAR_VARIABLE swap_a2_x}
        {CLEAR_VARIABLE swap_a2_y}
#enddef

#define HOPLITE_TELEPORTANIM
    [animation]
        apply_to=pre_teleport

        start_time=-1200

        teleport_sparkle_1_start_time=-1200
        teleport_sparkle_2_start_time=-1000
        teleport_sparkle_3_start_time=-800

        [teleport_sparkle_1_frame]
            duration=800
            halo=misc/blank-hex.png:1,halo/teleport-9.png,halo/teleport-8.png,halo/teleport-1.png,halo/teleport-2.png,halo/teleport-3.png,halo/teleport-4.png,halo/teleport-5.png,halo/teleport-6.png,halo/teleport-7.png,halo/teleport-8.png,halo/teleport-9.png,misc/blank-hex.png:1
            halo_x=-10
            halo_y=30~-30
        [/teleport_sparkle_1_frame]
        [teleport_sparkle_2_frame]
            duration=800
            halo=misc/blank-hex.png:1,halo/teleport-9.png,halo/teleport-8.png,halo/teleport-1.png,halo/teleport-2.png,halo/teleport-3.png,halo/teleport-4.png,halo/teleport-5.png,halo/teleport-6.png,halo/teleport-7.png,halo/teleport-8.png,halo/teleport-9.png,misc/blank-hex.png:1
            halo_x=0
            halo_y=40~-40
        [/teleport_sparkle_2_frame]
        [teleport_sparkle_3_frame]
            duration=800
            halo=misc/blank-hex.png:1,halo/teleport-9.png,halo/teleport-8.png,halo/teleport-1.png,halo/teleport-2.png,halo/teleport-3.png,halo/teleport-4.png,halo/teleport-5.png,halo/teleport-6.png,halo/teleport-7.png,halo/teleport-8.png,halo/teleport-9.png,misc/blank-hex.png:1
            halo_x=10
            halo_y=30~-30
        [/teleport_sparkle_3_frame]

        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-0.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-1.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-2.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-3.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-4.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-5.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-6.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-7.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-8.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-9.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=200
            image="misc/blank-hex.png"
        [/frame]
    [/animation]
    [animation]
        apply_to=post_teleport
        start_time=-1200

        teleport_sparkle_1_start_time=-1200
        teleport_sparkle_2_start_time=-1000
        teleport_sparkle_3_start_time=-800

        [teleport_sparkle_1_frame]
            duration=800
            halo=misc/blank-hex.png:1,halo/teleport-9.png,halo/teleport-8.png,halo/teleport-1.png,halo/teleport-2.png,halo/teleport-3.png,halo/teleport-4.png,halo/teleport-5.png,halo/teleport-6.png,halo/teleport-7.png,halo/teleport-8.png,halo/teleport-9.png,misc/blank-hex.png:1
            halo_x=10
            halo_y=-30~30
        [/teleport_sparkle_1_frame]
        [teleport_sparkle_2_frame]
            duration=800
            halo=misc/blank-hex.png:1,halo/teleport-9.png,halo/teleport-8.png,halo/teleport-1.png,halo/teleport-2.png,halo/teleport-3.png,halo/teleport-4.png,halo/teleport-5.png,halo/teleport-6.png,halo/teleport-7.png,halo/teleport-8.png,halo/teleport-9.png,misc/blank-hex.png:1
            halo_x=0
            halo_y=-40~40
        [/teleport_sparkle_2_frame]
        [teleport_sparkle_3_frame]
            duration=800
            halo=misc/blank-hex.png:1,halo/teleport-9.png,halo/teleport-8.png,halo/teleport-1.png,halo/teleport-2.png,halo/teleport-3.png,halo/teleport-4.png,halo/teleport-5.png,halo/teleport-6.png,halo/teleport-7.png,halo/teleport-8.png,halo/teleport-9.png,misc/blank-hex.png:1
            halo_x=-10
            halo_y=-30~30
        [/teleport_sparkle_3_frame]
        [frame]
            duration=200
            image="misc/blank-hex.png"
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-9.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-8.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-7.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-6.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-5.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-4.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-3.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-2.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-1.png~SCALE(144,144))
        [/frame]
        [frame]
            duration=100
            image_mod=~MASK(masks/teleport-mask-0.png~SCALE(144,144))
        [/frame]
    [/animation]
#enddef

#to make the code a bit more clean:

#define HOPLITE_PLAYERFILTER IF ELSE
[if]
 [have_unit]
    id=Hoplite
    side=$side_number
 [/have_unit]
 [and]
  [variable]
    name=current_side_2
    not_equals=yes
  [/variable]
 [/and]
 [then]
  {IF}
 [/then]
 [elseif]
  [variable]
    name=current_side_2
    equals=yes
  [/variable]
  [then]
  {ELSE}
  [/then]
 [/elseif]
 [else]
  {ELSE}
 [/else]
[/if]
#enddef

#define HOPLITE_PLAYERFILTER_VAR AND AND2
  {AND}
 [and]
  [variable]
    name=current_side_2
    not_equals=yes
  [/variable]
 [/and]
 [and]
  [variable]
    name=hoplite_multiplayer
    equals=yes
  [/variable]
 [/and]
 [or]
  {AND2}
 [and]
  [variable]
    name=current_side_2
    equals=yes
  [/variable]
  [variable]
    name=hoplite_multiplayer
    equals=yes
  [/variable]
 [/and]
 [/or]
#enddef

#define HOPLITE_PLAYERFILTER_VAR2 AND AND2
  {AND}
 [and]
 [have_unit]
    id=Hoplite
    side=$side_number
 [/have_unit]
 [/and]
 [and]
  [variable]
    name=hoplite_multiplayer
    equals=yes
  [/variable]
 [/and]
 [or]
  {AND2}
 [and]
 [have_unit]
    id=Hoplite2
    side=$side_number
 [/have_unit]
 [/and]
 [and]
  [variable]
    name=hoplite_multiplayer
    equals=yes
  [/variable]
 [/and]
 [/or]
#enddef

#define HOPLITE_PLAYERFILTER2 IF ELSE
[if]
 [have_unit]
    id=Hoplite
    x,y=$x1,$x1
 [/have_unit]
 [then]
  {IF}
 [/then]
 [else]
  {ELSE}
 [/else]
[/if]
#enddef

#define HOPLITE_PLAYERFILTER1b IF ELSE
[if]
  [variable]
    name=current_side_2
    equals=yes
  [/variable]
 [then]
  {ELSE}
 [/then]
 [else]
  {IF}
 [/else]
[/if]
#enddef

#define HOPLITE_PLAYERFILTER_X1_Y1 IF ELSE
[if]
 [have_unit]
    id=Hoplite
    x,y=$x1,$y1
 [/have_unit]
 [then]
  {IF}
 [/then]
 [elseif]
  [have_unit]
    id=Hoplite2
    x,y=$x1,$y1
  [/have_unit]
  [then]
  {ELSE}
  [/then]
 [/elseif]
[/if]
#enddef

#define HOPLITE_PLAYERFILTER_X2_Y2 IF ELSE
[if]
 [have_unit]
    id=Hoplite
    x,y=$x2,$y2
 [/have_unit]
 [then]
  {IF}
 [/then]
 [elseif]
  [have_unit]
    id=Hoplite2
    x,y=$x2,$y2
  [/have_unit]
  [then]
  {ELSE}
  [/then]
 [/elseif]
[/if]
#enddef

#define HOPLITE_PLAYER_UPGRADEFILTER ID FILTER MISC
[if]
 [variable]
   name={ID}_unlocked
   equals=yes
 [/variable]
 [or]
 [variable]
   name={ID}_unlocked1
   equals=yes
 [/variable]
  [and]
  [have_unit]
    id=Hoplite
    {FILTER}
  [/have_unit]
  [/and]
 [/or]
 [or]
 [variable]
   name={ID}_unlocked2
   equals=yes
 [/variable]
  [and]
  [have_unit]
    id=Hoplite2
    {FILTER}
  [/have_unit]
  [/and]
 [/or] 
 {MISC} 
[/if]
#enddef

#define HOPLITE_SPEARIMAGE VAR
            [if]
         [variable]
           name={VAR}
           not_equals=yes
         [/variable]
         [then]
         [/then]
         [else]
            [if]
            [variable]
              name={ID}_unlocked
              equals=yes
            [/variable]
        [then]
        [item]
            x,y=$x1,$y1
        image=items/spear-ares.png
            [/item]
        [/then]
        [else]
        [item]
            x,y=$x1,$y1
        image=items/spear.png
            [/item]
        [/else]
        [/if]
        [/else]
        [/if]
#enddef

#define RATSPAWNCHECK VAR
       {IF_VAR {VAR}_unlocked1 equals yes (
       [then]
       [set_variable]
          name=rats
          add=3
       [/set_variable]
       [/then])}
       {IF_VAR {VAR}_unlocked2 equals yes (
       [then]
       [set_variable]
          name=rats2
          add=3
       [/set_variable]
       [/then])}
       {IF_VAR {VAR}_unlocked equals yes (
       [then]
       [set_variable]
          name=rats
          add=3
       [/set_variable]
       [/then])}
#enddef

#define HOPLITE_ARTIFACTS
        [if]
     [have_unit]
               id=Hoplite
           type=Hoplite2
     [/have_unit]
     [and]
     [have_unit]
               id=Hoplite2
           type=Hoplite2_teal
     [/have_unit]
     [/and]
     [else]
        [sound]
       name=fanfare-short.wav
    [/sound]
        [object]
        silent=yes
            duration=forever
            [filter]
               id=Hoplite
            [/filter]
        [effect]
          apply_to=type
          name=Hoplite2
        [/effect]
        [/object]
        [object]
        silent=yes
            duration=forever
            [filter]
               id=Hoplite2
            [/filter]
        [effect]
          apply_to=type
          name=Hoplite2_teal
        [/effect]
        [/object]
        [object]
#            name="Spear of Ares"
            name="Athena's Spear"
            image=attacks/spear-ares.png
            duration=forever
            description= _ "Spear/Spear throw damage is increased by 5." 
            [filter]
               id=Hoplite
            [/filter]
        [/object]
        [object]
            name="Ares' Blade"
            image=attacks/shortsword-artemis.png
            duration=forever
            description= _ "Shortsword damage is increased by 3." 
            [filter]
               id=Hoplite
            [/filter]
        [/object]
        [object]
            name="Hephaestus' Platemail"
            image=items/armor-golden.png
            duration=forever
            description= _ "Gain 20% to all resistances." 
            [filter]
               id=Hoplite
            [/filter]
        [/object]
    [/else]
    [/if]
#enddef

#define SPARTAN_RETURN_ATTACK_INDEX_BY_NAME UNITVAR NAME
[foreach]
    array={UNITVAR}.attack
    index_var=i
    [do]
    {IF_VAR this_item.name equals {NAME} (
    [then]
    {VARIABLE tmp_index_return $i}
    [break][/break]#no need to continue the loop after the value is found
    [/then]
    )}
    [/do]
[/foreach]
#enddef

#define SPARTAN_GETDIR_REVERSED X1 Y1 X2 Y2 VARNAME
{VARIABLE tmp_reverse_dir $emptyvar}#declaring the variable, just in case it fixes the bug
[lua]
    code=<<

    local args = ...

--direction is intentionally reversed for knockback/aiming
--                        local dir = wesnoth.map.get_relative_dir({x = args.x1, y = args.y1},{x = args.x2, y = args.y2})
    local dir = wesnoth.map.get_relative_dir({x = args.x2, y = args.y2},{x = args.x1, y = args.y1})
    wml.variables[args.varname] = dir
    >>
    [args]
        x1={X1}
        y1={Y1}
        x2={X2}
        y2={Y2}
        varname={VARNAME}
    [/args]
[/lua]
#enddef