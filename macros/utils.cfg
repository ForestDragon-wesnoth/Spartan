#define SPARTAN_BOSSMUSICEND
    {SPARTAN_SMOOTH_REPLACE_MUSIC kreepor.ogg 1000 0}
#ifndef SPARTAN_MUSIC_FOUND
    {SPARTAN_SMOOTH_REPLACE_MUSIC underground.ogg 1000 0}
#endif
#enddef

#define HOPLITE_GET_RESIST_MULT UNIT_ID TYPE
[lua]
	code=<<

    local args = ...

    local unit = wesnoth.get_unit(args.id)

    local resist_multiplier = 1 - unit:resistance_against(args.damage_type) / 100. or 1

    wesnoth.set_variable("tmp_resistmult", resist_multiplier)

	>>
    [args]
    	id={UNIT_ID}
    	damage_type={TYPE}
    [/args]
[/lua]
#enddef

#define SPARTAN_SMOOTH_REPLACE_MUSIC NEW_TRACK FADE_OUT_TIME FADE_IN_TIME

{VARIABLE tmp_smooth_volume 100}
{VARIABLE tmp_smooth_delay_time "$({FADE_OUT_TIME} / 10)"}

{REPEAT 10 (
{VARIABLE_OP tmp_smooth_volume sub 10}
[volume]
    music=$tmp_smooth_volume
[/volume]
[delay]
    time=$tmp_smooth_delay_time
[/delay]
)}

[volume]
    music=0
[/volume]

{REPLACE_SCENARIO_MUSIC {NEW_TRACK}}

{VARIABLE tmp_smooth_delay_time "$({FADE_IN_TIME} / 10)"}

{REPEAT 10 (
{VARIABLE_OP tmp_smooth_volume add 10}
[volume]
    music=$tmp_smooth_volume
[/volume]
[delay]
    time=$tmp_smooth_delay_time
[/delay]
)}

[volume]
    music=100
[/volume]

{CLEAR_VARIABLE tmp_smooth_volume}
{CLEAR_VARIABLE tmp_smooth_delay_time}
#enddef